README.txt - файл к проекту JavaRealization

//////////////////////////////////////////
////////////// ОГЛАВЛЕНИЕ ////////////////
//////////////////////////////////////////

1. Формат входного файла.
2. Формат выходного файла.


//////////////////////////////////////////
///////// ФОРМАТ ВХОДНОГО ФАЙЛА //////////
//////////////////////////////////////////

1.1) Требования
	а) Имя входного файла задается первым аргументом командной строки.
		( Если аргумент не указан, по-умолчанию: "in.txt" )
	б) Имя выходного файла задается вторым аргументом командной строки.
		( Если аргумент не указан, по-умолчанию: "out.txt" )
	в) Содержимое входного файла должно быть представлено
		в виде набора команд, записанных в текстовом 
		виде в заданном формате (см. ниже).

1.2) Требования к записи команд
	а) Каждая команда должна начинаться с начала новой строки.
	б) Кроме строк, заполненных командами, допускается наличие
		путых строк и строк, начинающихся с пробелов.
		Такие строки будут игнорироваться программой.
	в) В любой строке допускается наличие комментариев, 
		оформленных по определенному формату (см. ниже)
	г) Каждая команда должна быть записана в определенном формате.
	д) Любое нарушение требований (а)-(д) повлечет прекращение
		обработки команд программой и наверняка ее преждевременное 
		завершение. Информацию по нарушению можно будет 
		увидеть в выходном файле.
	е) Количество пробелов, разделяющих слова, может быть любым.
	ж) Формат переноса строки, зависящий от системы, в которой был
 		создан файл ввода, на работу программы не влияет.

1.3) Требования к комментариям и формат записи комментариев.
	а) Комментарий может присутствовать в любой строке.
	б) Комментарий игнорируется программой и не будет
		отображен в выходном файле ( в отличии от команды )
	в) Чтобы записать комментарий, необходимо ввести комбинацию
		"//" ( без кавычек ) . Все, что будет написано 
		после комбинации, считается комментарием.

1.4) Список команд, их описание и формат записи.

1.4.1) Универсальный шаблон строки-команды 
       входноо файла (содаржимое кавычек):

	"<word_1><PROB><word_2>...<PROB><word_N><PROB_A>//<comment>
	
       где:
	
	<word_1> - (слово) - команда;
	<word_i>, где i>=2, - (слово) - аргумент команды;
	<comment> - комментарий - (произвольный набор символов, 
	                          исключая символ переноса строки;)
	<PROB> - положительное число подряд идущих пробелов;
	<PROB_A> - неотрицательное число подряд идущих пробелов;
	подстрока "//<comment>" может отсутвовать.
	N - любое неотрицательное целое число.	
	Если N=0, то строка не считается исполняемой.
	Если N>0, то строка исполняется.

1.4.2) Общие команды (не зависящие от текущей структуры):
	а) new [struct] [X] [Y] - создание новой структуры
		struct: ht - создание хэш-таблицы 
		        bst - создание бинарного дерева поиска
		        sa - создание сортированного массива
		X - (целое число):
			Если (struct==ht)  => X - размер таблицы
			                      (X >= 1)
			Если (struct==bst) => X - игнорируется
			                      (может отсутствать)
			Если (struct==sa)  => X - начальный размер
			                      массива (X >= 1)
		Y - (дробное число):
			Если (struct==ht)  => Y - игнорируется
			                      (может отсутствать)
			Если (struct==bst) => Y - игнорируется
			                      (может отсутствать)
			Если (struct==sa)  => Y - множитель расширения
			                      (Y > 1)

1.4.3) Команды для хэш-таблиц:
	а) add [key] [value] - добавление нового элемента 
	                       по ключу и значению.
		key - (целое число) - ключ;
		value - (целое число) - значение.
	б) del [key] - удаления элемента по ключу.
		key - (целое число) - ключ.
	в) find [key] - поиск элемента по ключу.
		key - (целое число) - ключ.
	г) min - получение элемента с минимальным ключем.
	д) max - получение элемента с максимальным ключем.
	е) data - возвращает текстовое изображение данных структуры.
	ж) datasimple - возвращает упрощенное текстовое 
		изображение данных структуры.
	з) state - возвращает текст с записанными значениями
		некоторых параметров и свойств структуры.
	и) print - возвращает всю информацию по структуре.

1.4.4) Команды для сортированного массива:
	а) add [key] [value] - добавление нового элемента 
	                       по ключу и значению.
		key - (целое число) - ключ;
		value - (целое число) - значение.
	б) del [key] - удаления элемента по ключу.
		key - (целое число) - ключ.
	в) find [key] - поиск элемента по ключу.
		key - (целое число) - ключ.
	г) min - получение элемента с минимальным ключем.
	д) max - получение элемента с максимальным ключем.
	е) data - возвращает текстовое изображение данных структуры.
	ж) datasimple - возвращает текстовое 
		изображение данных структуры.
	з) state - возвращает текст с записанными значениями
		некоторых параметров и свойств структуры.
	и) at [index] - возвращает элемент по заданному индексу
		index - (целое неотрицательное число) - индекс.
	к) print - возвращает всю информацию по структуре.

1.4.5) Команды для бинарного дерева поиска:
	а) add [key] [value] - добавление нового элемента 
	                       по ключу и значению.
		key - (целое число) - ключ;
		value - (целое число) - значение.
	б) del [key] - удаления элемента по ключу.
		key - (целое число) - ключ.
	в) find [key] - поиск элемента по ключу.
		key - (целое число) - ключ.
	г) min - получение элемента с минимальным ключем.
	д) max - получение элемента с максимальным ключем.
	е) data - возвращает текстовое изображение данных структуры.
	ж) datasimple - возвращает упрощенное текстовое 
		изображение данных структуры.
	з) state - возвращает текст с записанными значениями
		некоторых параметров и свойств структуры.
	и) print - возвращает всю информацию по структуре.


///////////////////////////////////////////
///////// ФОРМАТ ВЫХОДНОГО ФАЙЛА //////////
///////////////////////////////////////////

1.1) Общие сведения.

	Выходной файл представляет из себя файл с именем 
		"out.txt",
	представленный в текстовом формате, лежащий в том же
	каталоге, что и программа.

1.2) Формат текста выходного файла:

1.2.1) Общий вид:
	
	Теста выходного файла представляет из себя последовательность
	"блоков" текста, состоящих из 2х или N строк, где N>=4.

1.2.2) Принцип формирования "блоков"(см. п(1.2.1)):

	1я строка: "";
	2я строка: ">>IN_LINE", где IN_LINE - очередная строка-команда
		входного файла.
	Далее, если строка-команда IN_LINE не считается испоняемой
		(см. п.(1.4.1)), то блок закончен.
	Если же строка-команда IN_LINE считается испоняемой, то:
	3я строка: "";
	4я строка: "ANSWER_LINE_1";
	5я строка: "ANSWER_LINE_2";
	...
	Nя строка: "ANSWER_LINE_M";
		где ANSWER_LINE_i, 0 <= i <= M, - iя строка 
		ответа от исполняемой команды IN_LINE

	Соответственно, если входной файл содержит М строк, то 
		выходной файл будет содержать М "блоков", если 
		программа не будет аварийно завершена.